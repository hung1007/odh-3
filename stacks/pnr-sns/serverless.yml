org: hungnv
app: pnr-sns
service: pnr-sns
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: ${opt:stage, "prod"}
functions:
  test:
    handler: functions/index.handler
    events:
      - http:
          path: /test
          method: GET
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "content": "$input.body"
                }
            passThrough: WHEN_NO_TEMPLATES
projectDir: ../../            
custom:
  base: ${self:service}-${self:provider.stage}
  defaults: ${file(../../defaults.yml)}
  defaultParams: ${self:custom.defaults.custom.params} 
  params:
    EMAIL_DLQ: ${self:custom.defaultParams.${self:provider.stage}.EMAIL_DLQ}  
  sns:
    arn: arn:aws:sns:${aws:region}:${aws:accountId}
    FilterTopic:
      name: ${self:custom.base}-filter-topic.fifo
      arn: ${self:custom.sns.arn}:${self:custom.sns.FilterTopic.name}
    PnrErrorAlarmTopic:
        name: ${self:custom.base}-PnrError-alarm-topic
        arn: ${self:custom.sns.arn}:${self:custom.sns.PnrErrorAlarmTopic.name}
  sqs:
    params:
      MaximumMessageSize: 262144
      VisibilityTimeout: 360
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
    base:
      arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}
    queues:
      PnrErrorQueueDLQ:
        name: ${self:custom.base}-PnrErrorDlq-queue.fifo
        arn: ${self:custom.sqs.base.arn}:${self:custom.sqs.queues.PnrErrorQueueDLQ.name}
        url: https://sqs.${self:provider.region}.amazonaws.com/${aws:accountId}/${self:custom.sqs.queues.PnrErrorQueueDLQ.name}        
resources:            
  Resources: 
    PnrErrorQueueDLQ: 
      Type: AWS::SQS::Queue
      Properties: 
        FifoQueue: true
        MaximumMessageSize: ${self:custom.sqs.params.MaximumMessageSize}
        MessageRetentionPeriod: ${self:custom.sqs.params.MessageRetentionPeriod}
        ReceiveMessageWaitTimeSeconds: ${self:custom.sqs.params.ReceiveMessageWaitTimeSeconds}
        VisibilityTimeout: ${self:custom.sqs.params.VisibilityTimeout}
        QueueName : ${self:custom.sqs.queues.PnrErrorQueueDLQ.name}
    PnrErrorAlarmTopic: 
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${self:custom.sns.PnrErrorAlarmTopic.name}
        Subscription: 
          - 
            Endpoint: ${self:custom.params.EMAIL_DLQ}
            Protocol: "email"
    QueueDepthAlarm: 
      Type: AWS::CloudWatch::Alarm
      Properties: 
        AlarmDescription: "Alarm if queue depth increases to more than 10 messages"
        Namespace: "AWS/SQS"
        MetricName: "ApproximateNumberOfMessagesVisible"
        Dimensions: 
          - 
            Name: "QueueName"
            Value: 
              Fn::GetAtt: 
                - "PnrErrorQueueDLQ"
                - "QueueName"
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        AlarmActions: 
          - 
            Ref: PnrErrorAlarmTopic
        InsufficientDataActions: 
          - 
            Ref: PnrErrorAlarmTopic
  Outputs: 
    QueueURL: 
      Description: "URL of new Amazon SQS Queue"
      Value: 
        Ref: "PnrErrorQueueDLQ"
    QueueARN: 
      Description: "ARN of new AmazonSQS Queue"
      Value: 
        Fn::GetAtt: 
          - "PnrErrorQueueDLQ"
          - "Arn"
    QueueName: 
      Description: "Name of new Amazon SQS Queue"
      Value: 
        Fn::GetAtt: 
          - "PnrErrorQueueDLQ"
          - "QueueName"